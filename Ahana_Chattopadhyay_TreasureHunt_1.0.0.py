# -*- coding: utf-8 -*-
"""Game_version4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KQXTdowN_sraL48Sbhv_tv9YCg76T5Kt
"""

import json
import random
print(50*"☠️")


with open('a.txt', 'r', encoding='utf-8') as file1:
    ascii_art1 = file1.read()

print(ascii_art1)
print(50*"💎")

with open('b.txt', 'r', encoding='utf-8') as file2:
    ascii_art2 = file2.read()

with open('c.txt', 'r', encoding='utf-8') as file3:
    ascii_art3 = file3.read()

gold_coins = 1000
health_points = 100

def check_health_points(health_points):
  """
  This function takes as an argument the current health points the player possesses at the moment of the call of this function.
  In case of health points below 10 it notifies the player.
  Otherwise, the player can continue playing as usual.
  """
  if health_points < 10:
        print("Your health points are low. Be cautious!")
  else:
        print("You are in good health. You can continue playing.👍👍👍👍👍")


def check_teammate_immunity(team, persons_stats):
    """
    This function takes as arguments the list team and the dictionary persons_stats.
    For those team members who have an immunity below 5 points they die and the organisation of the team changes.
    In case every team member has more than 5 points of immunity, nobody dies and the team remains unchanged.
    """
    immunity_check = all(persons_stats[member]["immunity"] >= 5 for member in team)

    if immunity_check:
        print("Nobody dies.")
    else:
        team = [member for member in team if persons_stats[member]["immunity"] >= 5]
        print("Your current team members are:")
        for member in team:
            print(member)

    return team

def check_intelligence_and_force(intelligence, force, existing_team, new_team = [], member_to_check=None): #recursive function
  """
  Checks intelligence and force of the current team members. Only adds the members in the new team who qualify the minimum eligibility.
  """
  member_to_check = existing_team[0]
  for member in existing_team:
    if persons_stats[member]["force"] >= force and persons_stats[member]["intelligence"] >=intelligence:
      new_team.append(member_to_check)
    if len(existing_team) > 1:
      existing_team = existing_team[1:]
      check_intelligence_and_force(intelligence, force, existing_team, new_team =new_team)
    return new_team
    print(f"your current team members are: {new_team}")



def unlock_treasure_chest():
  """
  This function is called for opening a treasure chest.
  If the player is willing to unlock the chest, 5 attempts are given to try any one number between 1 to 5.
  The lock is set randomly and it's unknown to the player.
  If the input number is correct, the chest is unlocked.
  Else, the player continues trying untill all the attempts are exhausted.
  """
  treasure_unlocked = False

  while not treasure_unlocked:
      print("You've found a locked treasure chest!😀😀😀😀😀😀 You can try to unlock it.")
      unlock_attempts = 5

      while unlock_attempts > 0:
          unlock_choice = input("Do you want to try to unlock the chest? (Yes/No): ").lower()

          if unlock_choice == "yes":
              correct_combination = random.randint(1, 5)

              user_guess = int(input("Enter your guess (1-5): "))

              if user_guess == correct_combination:
                  print("Congratulations! You've unlocked the treasure chest!✨✨✨✨✨✨")
                  treasure_unlocked = True
                  break
              else:
                  unlock_attempts -= 1
                  print(f"Wrong guess! You have {unlock_attempts} attempts left.")
          else:
              print("You decided not to unlock the chest.")
              break

      if unlock_attempts == 0:
          print("You've exhausted all unlock attempts. The chest remains locked.😢😢😢😢😢")
          break

def retrieve_dict(json_file):
  """
  This function retrieves the dictionnary from an existing json file
  """

  with open(json_file, "r") as file_content:
    dict_inside = json.load(file_content)
    return dict_inside

intro = """
WELCOME TO THE TREASURE HUNT! YOU HAVE TO CHOOSE A CHARACTER NOW.
TYPE 1 IF YOU WANT TO BE A PIRATE🏴‍☠️🏴‍☠️🏴‍☠️🏴‍☠️🏴‍☠️🏴‍☠️🏴‍☠️.
TYPE 2 IF YOU WANT TO BE A SHIPMASTER.⚓⚓⚓⚓⚓⚓
"""
characters = ["1", "2"]
character = ""
while character not in characters:
    print(intro)
    character = input("TYPE 1 OR 2")


    if character == "1":
        gold_coins += 500
        print(f"""
        You are the pirate now! {print(ascii_art2)} Time to massacre whoever comes in between you and the treasure!
        You get 500 extra gold coins! You have total {gold_coins} gold coins! You can use this bonus to buy more weapons!
        """)



    elif character == "2":
        health_points += 50
        print(f"""
        You are the shipmaster! You are in charge of your ship. {print(ascii_art3)} Be ready to fight against the pirates! T
        You get 50 extra health points! You have total {health_points} health points right now! You can live longer and fight against the pirates.
        """)
    else:
        print("Oops! Start again!")




print("TIME TO BUY SOME WEAPONS WITH THE COINS THAT YOU HAVE. EACH SWORD COSTS 20 GOLD COINS AND EACH PISTOL COSTS 50 GOLD COINS.")
swords = int(input("HOW MANY SWORDS DO YOU WANT TO BUY? TYPE ANY NUMBER BETWEEN 0 AND 40."))
gold_coins -= (20*swords)
print(f"You have {gold_coins} gold coins left!")
possible_pistols = round(gold_coins / 50)
pistols = int(input(f"HOW MANY PISTOLS DO YOU WANT TO BUY? TYPE ANY NUMBER BETWEEN 0 TO {possible_pistols}"))
gold_coins -= (50*pistols)
print(f"You have {gold_coins} gold coins left!")


print(f"You have {health_points} health points right now. Each time you get defeated you will lose 10 health points.")
instruction_step1 = """
First, choose your teammates.
You need 3 team members, each with different stats.
You'll use their strengths to advance in the upcoming stages of the game.
In front of you, there are 6 unknown persons marked serially from 1 to 6.
Type the number of the person you want to pick.
"""
print(instruction_step1)


persons = ["Jacob", "Marx", "Nicolas", "Lola", "Cristine", "Pamela"]

retrieve_dict("e.json")

persons_stats = retrieve_dict("e.json")

team = []

for i in range(3):
    choice1 = int(input("Type any number between 1 to 6. Don't type the same number twice."))
    team.append(persons[choice1-1])
print("Your teammates are:")
for j in team:
    print(f"{j} has {persons_stats[j]['force']} units of force, {persons_stats[j]['intelligence']} units of intelligence, and {persons_stats[j]['immunity']} units of immunity.")

print("THE GAME BEGINS!😉✌️")


instruction_step2 = """
You see an island in the distance, and there's a rumor that treasure can be found there.
You decide to land on the island.
Upon reaching the shore, you discover three narrow paths that lead to a massive volcano, which is believed to house the hidden treasure.
Now, you must choose one of the paths to follow!
"""

print(instruction_step2)

retrieve_dict("d.json")

path_events = retrieve_dict("d.json")

choice2 = int(input("Type any number between 1 to 3: "))
chosen_path = path_events["Path Selection"]["Options"].get(str(choice2), "Unknown path")
print(f"You chose {chosen_path}.")

alert1 = """
BEWARE! THE NATIVE PEOPLE OF THE ISLAND WON'T LET YOU MOVE FORWARD.
YOU NEED TO FIGHT AGAINST THEM.
YOU NEED AT LEAST 10 SWORDS AND 5 PISTOLS TO WIN AGAINST THEM.
"""
print(alert1)

if swords >= 10 and pistols >= 5:
    swords -= 10
    pistols -= 5
    print(f"Continue fighting! You have {swords} swords and {pistols} pistols left.")


    ###Check the consequences based on the chosen path
    if choice2 == 1:
        # Consequences for the Longest path
        health_points -= 30
        print(f"You are tired walking. You lose 30 health points. You have {health_points} health points left.")



        check_teammate_immunity(team, persons_stats)
        check_intelligence_and_force(4, 6, team)
        check_health_points(health_points)

    elif choice2 == 2:
        # Consequences for the Shortest path
        print(path_events["Consequences"]["Shortest path"]["Result"])



        unlock_treasure_chest()#To be continued in the next version...

    else:
        # Consequences for the Most Dangerous path
        print("This path is encroached by wild animals.🦁🐍🐃🦏 You must fight them.")
        if swords >= 15 and pistols >= 10:
            swords -= 15
            pistols -= 10
            print(f"Continue fighting! You have {swords} swords and {pistols} pistols left.")
        else:
            print(path_events["Consequences"]["Most dangerous path"]["Insufficient Weapons"])
else:
    print("Oops! You haven't bought sufficient weapons. You die! Game over!😵😵😵😵😵😵")